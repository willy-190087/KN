{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Tentang Blog \u00b6 Pembuat \u00b6 NAMA : WILLY RAFI SABEKTI NIM : 190411100087 KELAS : KOMPUTASI NUMERIK A PRODI : TEKNIK INFORMATIKA PT : UNIVERSITAS TRUNOJOYO MADURA","title":"Tentang Blog"},{"location":"#tentang_blog","text":"","title":"Tentang Blog"},{"location":"#pembuat","text":"NAMA : WILLY RAFI SABEKTI NIM : 190411100087 KELAS : KOMPUTASI NUMERIK A PRODI : TEKNIK INFORMATIKA PT : UNIVERSITAS TRUNOJOYO MADURA","title":"Pembuat"},{"location":"diferensial-biasa/","text":"Solusi Numerik dari Persamaan Diferensial Biasa \u00b6 Pendahuluan \u00b6 Bagian ini akan membahas tentang solusi numerik dari persamaan diferensial biasa Diferensial biasa merupakan penentuan nilai terdekat turunan fungsi f. Diferensial Biasa dengan Metoda Euler dan Diferensial Biasa dengan Metoda Runge-Kutta adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Diferensial biasa. Diferensial Biasa dengan Metoda Euler \u00b6 Diferensial biasa dengan metode Euler ditulis dengan bentuk persamaan dibawah berikut y_{n+1}=y_{n}+h f\\left(t_{n}, y_{n}\\right) \\quad \\text { dimana } n=0,1,2, \\ldots Contoh : Dengan menggunakan Algoritma, Python dan metoda Euler, tentukan nilai diferensial dari persamaan dibawah berikut \\frac{d f(x)}{d x}=e^{-x} Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Euler sebagai berikut Mulai Tentukan fungsi f(x,y) Tentukan nilai titik awal (x0 dan y0), jumlah iterasi (n) dan titik perhitungan (xn) Hitung ukuran langkah (h = (xn - x0)/b) Hitung dengan persamaan Metoda Euler Tampilkan hasil Berhenti Langkah-langkah di atas adalah urutan Algoritma untuk menghitung metode ini import numpy as np import matplotlib.pyplot as plt plt.style.use ( 'seaborn-poster' ) %matplotlib inline f = lambda x, s: np.exp ( -x ) h = 0 .1 x = np.arange ( 0 , 1 + h, h ) s0 = -1 s = np.zeros ( len ( x )) s [ 0 ] = s0 for i in range ( 0 , len ( x ) - 1 ) : s [ i + 1 ] = s [ i ] + h*f ( x [ i ] , s [ i ]) plt.figure ( figsize = ( 12 , 8 )) plt.plot ( x, s, 'bo--' , label = 'Approximate solution' ) plt.plot ( x, -np.exp ( -x ) , 'g' , label = 'Exact solution' ) plt.xlabel ( 'x' ) plt.ylabel ( 'f(x)' ) plt.grid () plt.legend ( loc = 'lower right' ) plt.show () Hasil program : Berdasarkan hasil program, diperoleh solusi persamaan diatas pada Gambar di bawah ini. Gambar Grafik Solusi Persamaan di Atas Diferensial Biasa dengan Metoda Runge-Kutta \u00b6 Perhitungan diferensial biasa menggunakan metode Runge-Kutta memiliki banyak jenis, tapi disini hanya akan menerangkan Metode Runge-Kutta Orde 4 atau Metode Runge-Kutta Klasik. Diferensial biasa dengan metode Runge-Kutta Klasik ditulis dengan bentuk persamaan dibawah berikut \\mathrm{k}_{1}=\\mathrm{hf}\\left(\\mathrm{t}_{\\mathrm{n}}, \\mathrm{y}_{\\mathrm{n}}\\right) Contoh : Dengan menggunakan Python dan metoda Runge - Kutta klasik , hitung diferensial dari persamaan dibawah berikut \\dfrac{df\\left( x\\right) }{dx}=\\dfrac{\\left( x-y^{2}\\right) }{2} Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Runge \u2013 Kutta klasik sebagai berikut Mulai Tentukan fungsi f(x,y) Tentukan nilai titik awal (x0 dan y0), jumlah iterasi (n) dan titik perhitungan (xn) Hitung ukuran langkah (h = (xn - x0)/b) Hitung dengan persamaan Metoda Runge \u2013 Kutta klasik Tampilkan hasil Berhenti Langkah-langkah di atas adalah urutan Algoritma untuk menghitung metode ini import numpy as np import matplotlib.pyplot as plt import numba import time start_time = time.clock () @numba.jit () def dydx ( x, y ) : return (( x - y**2 ) /2 ) def rungeKutta ( x0, y0, x, h ) : n = ( int )(( x - x0 ) /h ) y = y0 for i in range ( 1 , n + 1 ) : k1 = h * dydx ( x0, y ) k2 = h * dydx ( x0 + 0 .5 * h, y + 0 .5 * k1 ) k3 = h * dydx ( x0 + 0 .5 * h, y + 0 .5 * k2 ) k4 = h * dydx ( x0 + h, y + k3 ) y = y + ( 1 .0 / 6 .0 ) * ( k1 + 2 * k2 + 2 * k3 + k4 ) x0 = x0 + h return y def dplot ( start,end,steps ) : Y = list () for x in np.linspace ( start,end,steps ) : Y.append ( rungeKutta ( x0, y, x , h )) plt.plot ( np.linspace ( start,end,steps ) ,Y ) plt.show () start,end = 0 , 10 steps = end* 100 x0 = 0 y = 1 h = 0 .002 dplot ( start,end,steps ) Hasil program : Berdasarkan hasil program, diperoleh solusi persamaan diatas pada Gambar di bawah ini. Rangkuman \u00b6 Diferensial biasa merupakan penentuan nilai terdekat turunan fungsi f. Persoalan diferensial biasa dapat diselesaikan dengan menggunakan metoda metoda Runge \u2013 Kutta klasik dan metoda Euler. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan. Referensi \u00b6 Afrianita, Reri., dan Heru Dibyo Laksono. 2015. Metoda Numerik dengan Matlab. Padang: LPTIK Universitas Andalas.","title":"Solusi Numerik dari Persamaan Diferensial Biasa"},{"location":"diferensial-biasa/#solusi_numerik_dari_persamaan_diferensial_biasa","text":"","title":"Solusi Numerik dari Persamaan Diferensial Biasa"},{"location":"diferensial-biasa/#pendahuluan","text":"Bagian ini akan membahas tentang solusi numerik dari persamaan diferensial biasa Diferensial biasa merupakan penentuan nilai terdekat turunan fungsi f. Diferensial Biasa dengan Metoda Euler dan Diferensial Biasa dengan Metoda Runge-Kutta adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Diferensial biasa.","title":"Pendahuluan"},{"location":"diferensial-biasa/#diferensial_biasa_dengan_metoda_euler","text":"Diferensial biasa dengan metode Euler ditulis dengan bentuk persamaan dibawah berikut y_{n+1}=y_{n}+h f\\left(t_{n}, y_{n}\\right) \\quad \\text { dimana } n=0,1,2, \\ldots Contoh : Dengan menggunakan Algoritma, Python dan metoda Euler, tentukan nilai diferensial dari persamaan dibawah berikut \\frac{d f(x)}{d x}=e^{-x} Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Euler sebagai berikut Mulai Tentukan fungsi f(x,y) Tentukan nilai titik awal (x0 dan y0), jumlah iterasi (n) dan titik perhitungan (xn) Hitung ukuran langkah (h = (xn - x0)/b) Hitung dengan persamaan Metoda Euler Tampilkan hasil Berhenti Langkah-langkah di atas adalah urutan Algoritma untuk menghitung metode ini import numpy as np import matplotlib.pyplot as plt plt.style.use ( 'seaborn-poster' ) %matplotlib inline f = lambda x, s: np.exp ( -x ) h = 0 .1 x = np.arange ( 0 , 1 + h, h ) s0 = -1 s = np.zeros ( len ( x )) s [ 0 ] = s0 for i in range ( 0 , len ( x ) - 1 ) : s [ i + 1 ] = s [ i ] + h*f ( x [ i ] , s [ i ]) plt.figure ( figsize = ( 12 , 8 )) plt.plot ( x, s, 'bo--' , label = 'Approximate solution' ) plt.plot ( x, -np.exp ( -x ) , 'g' , label = 'Exact solution' ) plt.xlabel ( 'x' ) plt.ylabel ( 'f(x)' ) plt.grid () plt.legend ( loc = 'lower right' ) plt.show () Hasil program : Berdasarkan hasil program, diperoleh solusi persamaan diatas pada Gambar di bawah ini. Gambar Grafik Solusi Persamaan di Atas","title":"Diferensial Biasa dengan Metoda Euler"},{"location":"diferensial-biasa/#diferensial_biasa_dengan_metoda_runge-kutta","text":"Perhitungan diferensial biasa menggunakan metode Runge-Kutta memiliki banyak jenis, tapi disini hanya akan menerangkan Metode Runge-Kutta Orde 4 atau Metode Runge-Kutta Klasik. Diferensial biasa dengan metode Runge-Kutta Klasik ditulis dengan bentuk persamaan dibawah berikut \\mathrm{k}_{1}=\\mathrm{hf}\\left(\\mathrm{t}_{\\mathrm{n}}, \\mathrm{y}_{\\mathrm{n}}\\right) Contoh : Dengan menggunakan Python dan metoda Runge - Kutta klasik , hitung diferensial dari persamaan dibawah berikut \\dfrac{df\\left( x\\right) }{dx}=\\dfrac{\\left( x-y^{2}\\right) }{2} Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Runge \u2013 Kutta klasik sebagai berikut Mulai Tentukan fungsi f(x,y) Tentukan nilai titik awal (x0 dan y0), jumlah iterasi (n) dan titik perhitungan (xn) Hitung ukuran langkah (h = (xn - x0)/b) Hitung dengan persamaan Metoda Runge \u2013 Kutta klasik Tampilkan hasil Berhenti Langkah-langkah di atas adalah urutan Algoritma untuk menghitung metode ini import numpy as np import matplotlib.pyplot as plt import numba import time start_time = time.clock () @numba.jit () def dydx ( x, y ) : return (( x - y**2 ) /2 ) def rungeKutta ( x0, y0, x, h ) : n = ( int )(( x - x0 ) /h ) y = y0 for i in range ( 1 , n + 1 ) : k1 = h * dydx ( x0, y ) k2 = h * dydx ( x0 + 0 .5 * h, y + 0 .5 * k1 ) k3 = h * dydx ( x0 + 0 .5 * h, y + 0 .5 * k2 ) k4 = h * dydx ( x0 + h, y + k3 ) y = y + ( 1 .0 / 6 .0 ) * ( k1 + 2 * k2 + 2 * k3 + k4 ) x0 = x0 + h return y def dplot ( start,end,steps ) : Y = list () for x in np.linspace ( start,end,steps ) : Y.append ( rungeKutta ( x0, y, x , h )) plt.plot ( np.linspace ( start,end,steps ) ,Y ) plt.show () start,end = 0 , 10 steps = end* 100 x0 = 0 y = 1 h = 0 .002 dplot ( start,end,steps ) Hasil program : Berdasarkan hasil program, diperoleh solusi persamaan diatas pada Gambar di bawah ini.","title":"Diferensial Biasa dengan Metoda Runge-Kutta"},{"location":"diferensial-biasa/#rangkuman","text":"Diferensial biasa merupakan penentuan nilai terdekat turunan fungsi f. Persoalan diferensial biasa dapat diselesaikan dengan menggunakan metoda metoda Runge \u2013 Kutta klasik dan metoda Euler. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan.","title":"Rangkuman"},{"location":"diferensial-biasa/#referensi","text":"Afrianita, Reri., dan Heru Dibyo Laksono. 2015. Metoda Numerik dengan Matlab. Padang: LPTIK Universitas Andalas.","title":"Referensi"},{"location":"integrasi-numerik/","text":"Integrasi Numerik \u00b6 Pendahuluan \u00b6 Bagian ini akan membahas tentang integrasi numerik Integrasi numerik merupakan metode-metode untuk menghitung luas daerah di bawah kurva dengan jarak tertentu. Integrasi numerik dengan metode Simpson, integrasi numerik dengan metode Titik Tengah, integrasi numerik dengan metode Trapezoid, dan Integrasi numerik dengan metode Riemann adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Integrasi numerik. Integrasi Numerik Dengan Metode Riemann \u00b6 Integrasi numerik dengan metode Riemann ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(x_{i}\\right) \\int_{a}^{b} f(x) d x \\approx \\sum_{i=1}^{n} h f\\left(x_{i}\\right) dimana \\mathrm{h}=\\frac{\\mathrm{b}-\\mathrm{a}}{\\mathrm{n}} Persamaan pertama biasa disebut penyelesaian integrasi numerik dengan metode Riemann kiri dan persamaan kedua biasa disebut penyelesaian integrasi numerik dengan metode Riemann kanan. Dari 2 persamaan tersebut bisa ditulis dengan bentuk persamaan dibawah berikut \\int_{x_{1}}^{x_{i+1}} f(x) d x=h f\\left(x_{i}\\right)+O\\left(h^{2}\\right) Contoh: Dengan menggunakan Algoritma, Python dan metode Riemann kiri, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Riemann kiri sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_riemann_L = h * sum ( f [ 0 :n-1 ]) print ( I_riemann_L ) err_riemann_L = 2 - I_riemann_L print ( err_riemann_L ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165 Contoh : Dengan menggunakan Algoritma, Python dan metode Riemann kanan, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Riemann kanan sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_riemann_R = h*sum ( f [ 1 :n ]) print ( I_riemann_R ) err_riemann_R = 2 - I_riemann_R print ( err_riemann_R ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165 Integrasi Numerik Dengan Metode Titik Tengah \u00b6 Integrasi numerik dengan metode titik tengah ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(y_{i}\\right) \\int_{x_{i}}^{x_{i+1}} f(x) d x=h f\\left(y_{i}\\right)+O\\left(h^{3}\\right) dimana \\mathrm{y}_{\\mathrm{i}}=\\frac{\\mathrm{x}_{\\mathrm{i}+1}+\\mathrm{x}_{\\mathrm{i}}}{2} Contoh : Dengan menggunakan Algoritma, Python dan metode titik tengah, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode titik tengah sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) I_mid = h*sum ( numpy.sin (( x [ 0 :n-1 ] + x [ 1 :n ]) /2 )) print ( I_mid ) err_mid = 2 - I_mid print ( err_mid ) Hasil program : 2 .0082484079079745 -0.008248407907974542 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 2.0082 dan tingkat kesalahan sebesar 0.0082 Integrasi Numerik Dengan Metode Trapezoid \u00b6 Integrasi numerik dengan metode Trapezoid ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h \\frac{f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)}{2} \\int_{x_{i}}^{x_{i+1}} f(x) d x=h \\frac{f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)}{2}+O\\left(h^{3}\\right) Contoh : Dengan menggunakan Algoritma, Python dan metode Trapezoid, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Trapezoid sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_trap = ( h/2 ) * ( f [ 0 ] + 2 *sum ( f [ 1 :n-1 ]) + f [ n-1 ]) print ( I_trap ) err_mid = 2 - I_trap print ( err_mid ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165 Integrasi Numerik Dengan Metode Simpson \u00b6 Integrasi numerik dengan metode Simpson ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\frac{h}{3}\\left[f\\left(x_{i}\\right)+4\\left(\\sum_{i=1, \\text { i odd }}^{n-1} f\\left(x_{i}\\right)\\right)+2\\left(\\sum_{i=2, \\text { i even }}^{n-2} f\\left(x_{i}\\right)+f\\left(x_{n}\\right)\\right)\\right] \\int_{x_{i}}^{x_{i+1}} f(x) d x=\\frac{h}{3}\\left(f\\left(x_{i-1}\\right)+4 f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)\\right)+O\\left(h^{5}\\right) Contoh : Dengan menggunakan Algoritma, Python dan metode Simpson, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Simpson sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_simp = ( h/3 ) * ( f [ 0 ] + 2 *sum ( f [ 0 :n-1:2 ]) + 4 *sum ( f [ 1 :n-1:2 ]) + f [ 0 ]) print ( I_simp ) err_mid = 2 - I_simp print ( err_mid ) Hasil program : 2 .0001095173150043 -0.00010951731500430384 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 2.0001 dan tingkat kesalahan sebesar 0.0001095 Rangkuman \u00b6 Integrasi numerik merupakan metode-metode untuk menghitung luas daerah di bawah kurva dengan jarak tertentu. Persoalan integrasi numerik dapat diselesaikan dengan menggunakan metode titik tengah, metode simpson, metode trapezoid, metode Riemann kiri, dan metode Riemann kanan. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan. Referensi \u00b6 Afrianita, Reri., dan Heru Dibyo Laksono. 2015. Metoda Numerik dengan Matlab. Padang: LPTIK Universitas Andalas.","title":"Integrasi Numerik"},{"location":"integrasi-numerik/#integrasi_numerik","text":"","title":"Integrasi Numerik"},{"location":"integrasi-numerik/#pendahuluan","text":"Bagian ini akan membahas tentang integrasi numerik Integrasi numerik merupakan metode-metode untuk menghitung luas daerah di bawah kurva dengan jarak tertentu. Integrasi numerik dengan metode Simpson, integrasi numerik dengan metode Titik Tengah, integrasi numerik dengan metode Trapezoid, dan Integrasi numerik dengan metode Riemann adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Integrasi numerik.","title":"Pendahuluan"},{"location":"integrasi-numerik/#integrasi_numerik_dengan_metode_riemann","text":"Integrasi numerik dengan metode Riemann ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(x_{i}\\right) \\int_{a}^{b} f(x) d x \\approx \\sum_{i=1}^{n} h f\\left(x_{i}\\right) dimana \\mathrm{h}=\\frac{\\mathrm{b}-\\mathrm{a}}{\\mathrm{n}} Persamaan pertama biasa disebut penyelesaian integrasi numerik dengan metode Riemann kiri dan persamaan kedua biasa disebut penyelesaian integrasi numerik dengan metode Riemann kanan. Dari 2 persamaan tersebut bisa ditulis dengan bentuk persamaan dibawah berikut \\int_{x_{1}}^{x_{i+1}} f(x) d x=h f\\left(x_{i}\\right)+O\\left(h^{2}\\right) Contoh: Dengan menggunakan Algoritma, Python dan metode Riemann kiri, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Riemann kiri sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_riemann_L = h * sum ( f [ 0 :n-1 ]) print ( I_riemann_L ) err_riemann_L = 2 - I_riemann_L print ( err_riemann_L ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165 Contoh : Dengan menggunakan Algoritma, Python dan metode Riemann kanan, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Riemann kanan sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_riemann_R = h*sum ( f [ 1 :n ]) print ( I_riemann_R ) err_riemann_R = 2 - I_riemann_R print ( err_riemann_R ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165","title":"Integrasi Numerik Dengan Metode Riemann"},{"location":"integrasi-numerik/#integrasi_numerik_dengan_metode_titik_tengah","text":"Integrasi numerik dengan metode titik tengah ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(y_{i}\\right) \\int_{x_{i}}^{x_{i+1}} f(x) d x=h f\\left(y_{i}\\right)+O\\left(h^{3}\\right) dimana \\mathrm{y}_{\\mathrm{i}}=\\frac{\\mathrm{x}_{\\mathrm{i}+1}+\\mathrm{x}_{\\mathrm{i}}}{2} Contoh : Dengan menggunakan Algoritma, Python dan metode titik tengah, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode titik tengah sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) I_mid = h*sum ( numpy.sin (( x [ 0 :n-1 ] + x [ 1 :n ]) /2 )) print ( I_mid ) err_mid = 2 - I_mid print ( err_mid ) Hasil program : 2 .0082484079079745 -0.008248407907974542 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 2.0082 dan tingkat kesalahan sebesar 0.0082","title":"Integrasi Numerik Dengan Metode Titik Tengah"},{"location":"integrasi-numerik/#integrasi_numerik_dengan_metode_trapezoid","text":"Integrasi numerik dengan metode Trapezoid ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h \\frac{f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)}{2} \\int_{x_{i}}^{x_{i+1}} f(x) d x=h \\frac{f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)}{2}+O\\left(h^{3}\\right) Contoh : Dengan menggunakan Algoritma, Python dan metode Trapezoid, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Trapezoid sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_trap = ( h/2 ) * ( f [ 0 ] + 2 *sum ( f [ 1 :n-1 ]) + f [ n-1 ]) print ( I_trap ) err_mid = 2 - I_trap print ( err_mid ) Hasil program : 1 .9835235375094546 0 .01647646249054535 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 1.9835 dan tingkat kesalahan sebesar 0.0165","title":"Integrasi Numerik Dengan Metode Trapezoid"},{"location":"integrasi-numerik/#integrasi_numerik_dengan_metode_simpson","text":"Integrasi numerik dengan metode Simpson ditulis dengan 2 bentuk persamaan berikut \\int_{a}^{b} f(x) d x \\approx \\frac{h}{3}\\left[f\\left(x_{i}\\right)+4\\left(\\sum_{i=1, \\text { i odd }}^{n-1} f\\left(x_{i}\\right)\\right)+2\\left(\\sum_{i=2, \\text { i even }}^{n-2} f\\left(x_{i}\\right)+f\\left(x_{n}\\right)\\right)\\right] \\int_{x_{i}}^{x_{i+1}} f(x) d x=\\frac{h}{3}\\left(f\\left(x_{i-1}\\right)+4 f\\left(x_{i}\\right)+f\\left(x_{i+1}\\right)\\right)+O\\left(h^{5}\\right) Contoh : Dengan menggunakan Algoritma, Python dan metode Simpson, tentukan nilai integrasi dari persamaan dibawah berikut \\int_{0}^{\\delta} \\sin (x) d x Jawab : Adapun Algoritma dan kode Python untuk penyelesaian persamaan diatas dengan metode Simpson sebagai berikut Flowchart di atas menerangkan algoritma komputasi untuk menghitung metode ini import numpy import math a = 0 b = math.pi n = 11 h = ( b-a ) / ( n-1 ) x = numpy.linspace ( a, b, num = n ) f = numpy.sin ( x ) I_simp = ( h/3 ) * ( f [ 0 ] + 2 *sum ( f [ 0 :n-1:2 ]) + 4 *sum ( f [ 1 :n-1:2 ]) + f [ 0 ]) print ( I_simp ) err_mid = 2 - I_simp print ( err_mid ) Hasil program : 2 .0001095173150043 -0.00010951731500430384 Hasil perhitungan integrasi numerik dari persamaan diatas dengan menggunakan Python didapatkan hasil sebesar 2.0001 dan tingkat kesalahan sebesar 0.0001095","title":"Integrasi Numerik Dengan Metode Simpson"},{"location":"integrasi-numerik/#rangkuman","text":"Integrasi numerik merupakan metode-metode untuk menghitung luas daerah di bawah kurva dengan jarak tertentu. Persoalan integrasi numerik dapat diselesaikan dengan menggunakan metode titik tengah, metode simpson, metode trapezoid, metode Riemann kiri, dan metode Riemann kanan. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan.","title":"Rangkuman"},{"location":"integrasi-numerik/#referensi","text":"Afrianita, Reri., dan Heru Dibyo Laksono. 2015. Metoda Numerik dengan Matlab. Padang: LPTIK Universitas Andalas.","title":"Referensi"},{"location":"license/","text":"License \u00b6 MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author \u00b6 Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support_author","text":"Amazon wish list","title":"Support Author"},{"location":"sistem-persamaan-linear/","text":"Solusi Numerik dari Sistem Persamaan Aljabar Linear \u00b6 Pendahuluan \u00b6 Bagian ini akan membahas tentang solusi numerik dari sistem persamaan aljabar linear Sistem persamaan linear adalah himpunan persamaan linear yang mempunyai beberapa variabel. Sistem Persamaan Linear dengan Metode Eliminasi Gauss, Sistem Persamaan Linear dengan Metode Jacobi, dan Sistem Persamaan Linear dengan Metode Gauss-Seidel adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Sistem persamaan linear. Sistem Persamaan Linear dengan Metode Eliminasi Gauss \u00b6 Metode Eliminasi Gauss berfungsi untuk mendapatkan akar dari sistem persamaan linier \\begin{gathered} f_{1}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\\\ f_{2}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\\\ \\vdots \\\\ f_{n}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\end{gathered} Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan metode Eliminasi Gauss, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &2 x_{1}-7 x_{2}+4 x_{3}=9 \\\\ &x_{1}+9 x_{2}-6 x_{3}=1 \\\\ &-3 x_{1}+8 x_{2}+5 x_{3}=6 \\end{aligned} Jawab : Pertama, ubah sistem persamaan tersebut menjadi matrix seperti berikut: [B]\\{x\\}=\\{u\\} \\left[\\begin{array}{rrr} 2 & -7 & 4 \\\\ 1 & 9 & -6 \\\\ -3 & 8 & 5 \\end{array}\\right]\\left\\{\\begin{array}{l} x_{1} \\\\ x_{2} \\\\ x_{3} \\end{array}\\right\\}=\\left\\{\\begin{array}{l} 9 \\\\ 1 \\\\ 6 \\end{array}\\right\\} Untuk menghitung dengan metode eliminasi gauss ubah mejadi seperti berikut: [B|u| I]=\\left[\\begin{array}{rrr|r|rrr} 2 & -7 & 4 & 9 & 1 & 0 & 0 \\\\ 1 & 9 & -6 & 1 & 0 & 1 & 0 \\\\ -3 & 8 & 5 & 6 & 0 & 0 & 1 \\end{array}\\right] Lakukan perkalian baris pertama dengan 1/2, lalu lakukan pengurangan baris kedua dengan baris pertama baru, dan lalu lakukan penjumlahan baris ketiga dengan baris pertama baru yang telah di kali dengan 3. \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 2 & 9 / 2 & 1 / 2 & 0 & 0 \\\\ 0 & 25 / 2 & -8 & -7 / 2 & -1 / 2 & 1 & 0 \\\\ 0 & -5 / 2 & 11 & 39 / 2 & 3 / 2 & 0 & 1 \\end{array}\\right] Lalu lakukan perkalian baris kedua dengan 2/25 dan lakukan penjumlahan baris ketiga dengan baris kedua baru yang telah dikali dengan 5/2 \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 2 & 9 / 2 & 1 / 2 & 0 & 0 \\\\ 0 & 1 & -16 / 25 & -7 / 25 & -1 / 25 & 2 / 25 & 0 \\\\ 0 & 0 & 47 / 5 & 94 / 25 & 7 / 5 & 1 / 5 & 1 \\end{array}\\right] Lalu lakukan perkalian baris ketiga dengan 5/47, lakukan penjumlahan baris kedua dengan baris ketiga baru yang telah dikali dengan 16/25, lakukan penjumlahan baris pertama dengan baris ketiga baru yang telah dikali dengan -2 \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 0 & 1 / 2 & 19 / 24 & -2 / 47 & -10 / 47 \\\\ 0 & 1 & 0 & 1 & 13 / 235 & 22 / 235 & 16 / 235 \\\\ 0 & 0 & 1 & 2 & 7 / 47 & 1 / 47 & 5 / 47 \\end{array}\\right] Lalu lakukan penjumlahan baris pertama dengan baris kedua yang telah dikali dengan 7/2 \\left[\\begin{array}{lll|l|lll} 1 & 0 & 0 & 4 & 93 / 235 & 67 / 235 & 6 / 235 \\\\ 0 & 1 & 0 & 1 & 13 / 235 & 22 / 235 & 16 / 235 \\\\ 0 & 0 & 1 & 2 & 7 / 47 & 1 / 47 & 5 / 47 \\end{array}\\right] Jadi hasil dari perhitungan sistem persamaan di atas dengan mengunakan eliminasi gauss didapatkan x 1 = 4, x 2 = 1, x 3 = 2 Penjelasan di atas adalah algoritma perhitungan manual metode ini import numpy as np import sys n = int ( input ( 'Masukkan jumlah yang tidak diketahui: ' )) a = np.zeros (( n,n+1 )) x = np.zeros ( n ) print ( 'Masukkan Koefisien Matriks yang Diperbesar:' ) for i in range ( n ) : for j in range ( n+1 ) : a [ i ][ j ] = float ( input ( 'a[' +str ( i ) + '][' + str ( j ) + ']=' )) for i in range ( n ) : if a [ i ][ i ] == 0 .0: sys.exit ( 'Bagi dengan nol terdeteksi!' ) for j in range ( i+1, n ) : ratio = a [ j ][ i ] /a [ i ][ i ] for k in range ( n+1 ) : a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x [ n-1 ] = a [ n-1 ][ n ] /a [ n-1 ][ n-1 ] for i in range ( n-2,-1,-1 ) : x [ i ] = a [ i ][ n ] for j in range ( i+1,n ) : x [ i ] = x [ i ] - a [ i ][ j ] *x [ j ] x [ i ] = x [ i ] /a [ i ][ i ] print ( 'Solusi yang didapatkan adalah: ' ) for i in range ( n ) : print ( 'X%d = %0.2f' % ( i,x [ i ]) , end = '\\t' ) Hasil program : Masukkan jumlah yang tidak diketahui: 3 Masukkan Koefisien Matriks yang Diperbesar: a [ 0 ][ 0 ]= 2 a [ 0 ][ 1 ]= -7 a [ 0 ][ 2 ]= 4 a [ 0 ][ 3 ]= 9 a [ 1 ][ 0 ]= 1 a [ 1 ][ 1 ]= 9 a [ 1 ][ 2 ]= -6 a [ 1 ][ 3 ]= 1 a [ 2 ][ 0 ]= -3 a [ 2 ][ 1 ]= 8 a [ 2 ][ 2 ]= 5 a [ 2 ][ 3 ]= 6 Solusi yang didapatkan adalah: X0 = 4 .00 X1 = 1 .00 X2 = 2 .00 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 4, x 2 = 1, x 3 = 2. Sistem Persamaan Linear dengan Metode Jacobi \u00b6 Dalam metode ini kita akan membahas sistem persamaan dengan bentuk [B]{x} = {u} atau \\begin{gathered} b_{11} x_{11}+b_{12} x_{2}+\\cdots+b_{1 n} x_{n}=u_{1} \\\\ b_{21} x_{1}+b_{22} x_{2}+\\cdots+b_{2 n} x_{n}=u_{2} \\\\ \\vdots \\quad \\vdots \\\\ b_{n 1} x_{1}+b_{n 2} x_{2}+\\cdots+b_{n n} x_{n}=u_{n} \\end{gathered} Metode ini membuat sebuah sistem persamaan yang mendekati sistem persamaan di atas: \\begin{aligned} &x_{1}=\\frac{u_{1}-b_{12} x_{2}-b_{13} x_{3}-\\ldots-b_{1 n} x_{n}}{b_{11}} \\\\ &x_{2}=\\frac{u_{2}-b_{21} x_{1}-b_{23} x_{3}-\\ldots-b_{2 n} x_{n}}{b_{22}} \\\\ &x_{n}=\\frac{u_{n}-b_{n 1} x_{1}-b_{n 2} x_{2}-\\ldots-b_{n, n-1} x_{n-1}}{b_{n n}} \\end{aligned} bila b ii =0 atau memiliki nilai kecil, maka harus diatur agar b ii \u22600 Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan Metode Jacobi, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &\\left.\\begin{array}{l} 4 x_{1}+2 x_{2}+x_{3} & =11 \\\\ -x_{1}+2 x_{2} & =3 \\\\ 2 x_{1}+x_{2}+4 x_{3} & =16 \\end{array}\\right\\} \\Rightarrow\\{x\\}=\\left\\{\\begin{array}{l} 1 \\\\ 2 \\\\ 3 \\end{array}\\right\\} \\end{aligned} Jawab : Persamaan di atas ditulis lagi: \\begin{aligned} &x_{1}=\\frac{11}{4}-\\frac{1}{2} x_{2}-\\frac{1}{4} x_{3} \\\\ &x_{2}=\\frac{3}{2}+\\frac{1}{2} x_{1} \\\\ &x_{3}=4-\\frac{1}{2} x_{1}-\\frac{1}{4} x_{2} \\end{aligned} Pertama lakukan tebakan nilai awal {x 0 } lalu masukkan kedalam persamaan diatas untuk mendapatkan {x} baru. Misal disini tebakan nilai awal dalam vektor {x 0 } = [1, 1, 1] t \\begin{aligned} &x_{11}=\\frac{11}{4}-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=2 \\\\ &x_{21}=\\frac{3}{2}+\\frac{1}{2} \\times 1=2 \\\\ &x_{31}=4-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=\\frac{13}{4} \\end{aligned} Maka, \\begin{aligned} &\\left\\{x_{1}\\right\\}=\\left[2, \\quad 2, \\quad \\frac{13}{4}\\right]^{t}\\\\ &\\left\\{x_{2}\\right\\}=\\left[\\begin{array}{lll} 0.9375 & 2.5 & 2.5 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{3}\\right\\}=\\left[\\begin{array}{lll} 0.875 & 1.96875 & 2.90625 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{4}\\right\\}=\\left[\\begin{array}{lll} 1.03906 & 1.9375 & 3.0703 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{5}\\right\\}=\\left[\\begin{array}{lll} 1.01367 & 2.0195 & 2.9961 \\end{array}\\right]^{t}\\\\ &\\begin{aligned} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\vdots \\quad \\vdots \\\\ \\end{aligned}\\\\ &\\left\\{x_{14}\\right\\}=\\left[\\begin{array}{lll} 1.0000 & 2.0000 & 3.0000 \\end{array}\\right]^{t} \\end{aligned} Pada metode ini untuk medapatkan elemen vektor yang baru menggunakan elemen vaktor yang lama. Penjelasan di atas adalah algoritma perhitungan manual metode ini f1 = lambda x,y,z: ( 11 -2*y-1*z ) /4 f2 = lambda x,y,z: ( 3 +1*x+0*z ) /2 f3 = lambda x,y,z: ( 16 -2*x-1*y ) /4 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'Masukkan toleransi error: ' )) print ( '\\nHitung\\tx\\ty\\tz\\n' ) condition = True while condition: x1 = f1 ( x0,y0,z0 ) y1 = f2 ( x0,y0,z0 ) z1 = f3 ( x0,y0,z0 ) print ( '%d\\t%0.4f\\t%0.4f\\t%0.4f\\n' % ( count, x1,y1,z1 )) e1 = abs ( x0-x1 ) ; e2 = abs ( y0-y1 ) ; e3 = abs ( z0-z1 ) ; count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1>e and e2>e and e3>e print ( '\\nSolusi: x=%0.3f, y=%0.3f dan z = %0.3f\\n' % ( x1,y1,z1 )) Hasil program : Masukkan toleransi error: 0 .0001 Hitung x y z 1 2 .7500 1 .5000 4 .0000 2 1 .0000 2 .8750 2 .2500 3 0 .7500 2 .0000 2 .7812 4 1 .0547 1 .8750 3 .1250 5 1 .0312 2 .0273 3 .0039 6 0 .9854 2 .0156 2 .9775 7 0 .9978 1 .9927 3 .0034 8 1 .0028 1 .9989 3 .0029 9 0 .9998 2 .0014 2 .9989 10 0 .9996 1 .9999 2 .9997 11 1 .0001 1 .9998 3 .0002 12 1 .0000 2 .0001 3 .0000 Solusi: x = 1 .000, y = 2 .000 dan z = 3 .000 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 1, x 2 = 2, x 3 = 3. Sistem Persamaan Linear dengan Metode Gauss-Seidel \u00b6 Dalam metode ini kita akan membahas sistem persamaan dengan bentuk [B]{x} = {u} atau \\begin{gathered} b_{11} x_{11}+b_{12} x_{2}+\\cdots+b_{1 n} x_{n}=u_{1} \\\\ b_{21} x_{1}+b_{22} x_{2}+\\cdots+b_{2 n} x_{n}=u_{2} \\\\ \\vdots \\quad \\vdots \\\\ b_{n 1} x_{1}+b_{n 2} x_{2}+\\cdots+b_{n n} x_{n}=u_{n} \\end{gathered} Metode ini membuat sebuah sistem persamaan yang mendekati sistem persamaan di atas: \\begin{aligned} &x_{1}=\\frac{u_{1}-b_{12} x_{2}-b_{13} x_{3}-\\ldots-b_{1 n} x_{n}}{b_{11}} \\\\ &x_{2}=\\frac{u_{2}-b_{21} x_{1}-b_{23} x_{3}-\\ldots-b_{2 n} x_{n}}{b_{22}} \\\\ &x_{n}=\\frac{u_{n}-b_{n 1} x_{1}-b_{n 2} x_{2}-\\ldots-b_{n, n-1} x_{n-1}}{b_{n n}} \\end{aligned} bila b ii =0 atau memiliki nilai kecil, maka harus diatur agar b ii \u22600 Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan Metode Gauss-Seidel, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &\\left.\\begin{array}{l} 4 x_{1}+2 x_{2}+x_{3} & =11 \\\\ -x_{1}+2 x_{2} & =3 \\\\ 2 x_{1}+x_{2}+4 x_{3} & =16 \\end{array}\\right\\} \\Rightarrow\\{x\\}=\\left\\{\\begin{array}{l} 1 \\\\ 2 \\\\ 3 \\end{array}\\right\\} \\end{aligned} Jawab : Persamaan di atas ditulis lagi: \\begin{aligned} &x_{1}=\\frac{11}{4}-\\frac{1}{2} x_{2}-\\frac{1}{4} x_{3} \\\\ &x_{2}=\\frac{3}{2}+\\frac{1}{2} x_{1} \\\\ &x_{3}=4-\\frac{1}{2} x_{1}-\\frac{1}{4} x_{2} \\end{aligned} Pertama lakukan tebakan nilai awal {x 0 } lalu masukkan kedalam persamaan diatas untuk mendapatkan {x} baru. Misal disini tebakan nilai awal dalam vektor {x 0 } = [1, 1, 1] t \\begin{aligned} &x_{11}=\\frac{11}{4}-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=2 \\\\ &x_{21}=\\frac{3}{2}+\\frac{1}{2} \\times 2=\\frac{5}{2} \\\\ &x_{31}=4-\\frac{1}{2} \\times 2-\\frac{1}{4} \\times \\frac{5}{2}=\\frac{19}{8} \\end{aligned} Maka, \\begin{aligned} &\\left\\{x_{1}\\right\\}=\\left[2, \\frac{5}{2}, \\frac{19}{8}\\right]^{t}\\\\ &\\left\\{x_{2}\\right\\}=\\left[\\begin{array}{lll} 0.9063 & 1.9531 & 3.0586 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{3}\\right\\}=\\left[\\begin{array}{lll} 1.0088 & 2.0044 & 2.9945 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{4}\\right\\}=\\left[\\begin{array}{lll} 0.9992 & 1.9996 & 3.0005 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{5}\\right\\}=\\left[\\begin{array}{lll} 1.0000 & 2.0000 & 3.0000 \\end{array}\\right]^{t} \\end{aligned} Pada metode ini untuk medapatkan elemen vektor yang baru menggunakan elemen vaktor yang baru saja dihitung. Penjelasan di atas adalah algoritma perhitungan manual metode ini f1 = lambda x,y,z: ( 11 -2*y-1*z ) /4 f2 = lambda x,y,z: ( 3 +1*x+0*z ) /2 f3 = lambda x,y,z: ( 16 -2*x-1*y ) /4 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'Masukkan toleransi error: ' )) print ( '\\nHitung\\tx\\ty\\tz\\n' ) condition = True while condition: x1 = f1 ( x0,y0,z0 ) y1 = f2 ( x1,y0,z0 ) z1 = f3 ( x1,y1,z0 ) print ( '%d\\t%0.4f\\t%0.4f\\t%0.4f\\n' % ( count, x1,y1,z1 )) e1 = abs ( x0-x1 ) ; e2 = abs ( y0-y1 ) ; e3 = abs ( z0-z1 ) ; count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1>e and e2>e and e3>e print ( '\\nSolusi: x=%0.3f, y=%0.3f and z = %0.3f\\n' % ( x1,y1,z1 )) Hasil program : Masukkan toleransi error: 0 .0001 Hitung x y z 1 2 .7500 2 .8750 1 .9062 2 0 .8359 1 .9180 3 .1025 3 1 .0154 2 .0077 2 .9904 4 0 .9986 1 .9993 3 .0009 5 1 .0001 2 .0001 2 .9999 6 1 .0000 2 .0000 3 .0000 Solusi: x = 1 .000, y = 2 .000 and z = 3 .000 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 1, x 2 = 2, x 3 = 3. Rangkuman \u00b6 Sistem persamaan linear adalah himpunan persamaan linear yang mempunyai beberapa variabel. Persoalan sistem persamaan linear dapat diselesaikan dengan menggunakan Metode Eliminasi Gauss, Metode Jacobi, dan Metode Gauss-Seidel. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan. Referensi \u00b6 Luknanto, Djoko. 2001. Metode Numerik. Yogyakarta: Universitas Gadjah Mada.","title":"Solusi Numerik dari Sistem Persamaan Aljabar Linear"},{"location":"sistem-persamaan-linear/#solusi_numerik_dari_sistem_persamaan_aljabar_linear","text":"","title":"Solusi Numerik dari Sistem Persamaan Aljabar Linear"},{"location":"sistem-persamaan-linear/#pendahuluan","text":"Bagian ini akan membahas tentang solusi numerik dari sistem persamaan aljabar linear Sistem persamaan linear adalah himpunan persamaan linear yang mempunyai beberapa variabel. Sistem Persamaan Linear dengan Metode Eliminasi Gauss, Sistem Persamaan Linear dengan Metode Jacobi, dan Sistem Persamaan Linear dengan Metode Gauss-Seidel adalah metode-metode yang sering digunakan untuk menyelesaikan permasalahan Sistem persamaan linear.","title":"Pendahuluan"},{"location":"sistem-persamaan-linear/#sistem_persamaan_linear_dengan_metode_eliminasi_gauss","text":"Metode Eliminasi Gauss berfungsi untuk mendapatkan akar dari sistem persamaan linier \\begin{gathered} f_{1}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\\\ f_{2}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\\\ \\vdots \\\\ f_{n}\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)=0 \\end{gathered} Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan metode Eliminasi Gauss, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &2 x_{1}-7 x_{2}+4 x_{3}=9 \\\\ &x_{1}+9 x_{2}-6 x_{3}=1 \\\\ &-3 x_{1}+8 x_{2}+5 x_{3}=6 \\end{aligned} Jawab : Pertama, ubah sistem persamaan tersebut menjadi matrix seperti berikut: [B]\\{x\\}=\\{u\\} \\left[\\begin{array}{rrr} 2 & -7 & 4 \\\\ 1 & 9 & -6 \\\\ -3 & 8 & 5 \\end{array}\\right]\\left\\{\\begin{array}{l} x_{1} \\\\ x_{2} \\\\ x_{3} \\end{array}\\right\\}=\\left\\{\\begin{array}{l} 9 \\\\ 1 \\\\ 6 \\end{array}\\right\\} Untuk menghitung dengan metode eliminasi gauss ubah mejadi seperti berikut: [B|u| I]=\\left[\\begin{array}{rrr|r|rrr} 2 & -7 & 4 & 9 & 1 & 0 & 0 \\\\ 1 & 9 & -6 & 1 & 0 & 1 & 0 \\\\ -3 & 8 & 5 & 6 & 0 & 0 & 1 \\end{array}\\right] Lakukan perkalian baris pertama dengan 1/2, lalu lakukan pengurangan baris kedua dengan baris pertama baru, dan lalu lakukan penjumlahan baris ketiga dengan baris pertama baru yang telah di kali dengan 3. \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 2 & 9 / 2 & 1 / 2 & 0 & 0 \\\\ 0 & 25 / 2 & -8 & -7 / 2 & -1 / 2 & 1 & 0 \\\\ 0 & -5 / 2 & 11 & 39 / 2 & 3 / 2 & 0 & 1 \\end{array}\\right] Lalu lakukan perkalian baris kedua dengan 2/25 dan lakukan penjumlahan baris ketiga dengan baris kedua baru yang telah dikali dengan 5/2 \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 2 & 9 / 2 & 1 / 2 & 0 & 0 \\\\ 0 & 1 & -16 / 25 & -7 / 25 & -1 / 25 & 2 / 25 & 0 \\\\ 0 & 0 & 47 / 5 & 94 / 25 & 7 / 5 & 1 / 5 & 1 \\end{array}\\right] Lalu lakukan perkalian baris ketiga dengan 5/47, lakukan penjumlahan baris kedua dengan baris ketiga baru yang telah dikali dengan 16/25, lakukan penjumlahan baris pertama dengan baris ketiga baru yang telah dikali dengan -2 \\left[\\begin{array}{rrr|r|rrr} 1 & -7 / 2 & 0 & 1 / 2 & 19 / 24 & -2 / 47 & -10 / 47 \\\\ 0 & 1 & 0 & 1 & 13 / 235 & 22 / 235 & 16 / 235 \\\\ 0 & 0 & 1 & 2 & 7 / 47 & 1 / 47 & 5 / 47 \\end{array}\\right] Lalu lakukan penjumlahan baris pertama dengan baris kedua yang telah dikali dengan 7/2 \\left[\\begin{array}{lll|l|lll} 1 & 0 & 0 & 4 & 93 / 235 & 67 / 235 & 6 / 235 \\\\ 0 & 1 & 0 & 1 & 13 / 235 & 22 / 235 & 16 / 235 \\\\ 0 & 0 & 1 & 2 & 7 / 47 & 1 / 47 & 5 / 47 \\end{array}\\right] Jadi hasil dari perhitungan sistem persamaan di atas dengan mengunakan eliminasi gauss didapatkan x 1 = 4, x 2 = 1, x 3 = 2 Penjelasan di atas adalah algoritma perhitungan manual metode ini import numpy as np import sys n = int ( input ( 'Masukkan jumlah yang tidak diketahui: ' )) a = np.zeros (( n,n+1 )) x = np.zeros ( n ) print ( 'Masukkan Koefisien Matriks yang Diperbesar:' ) for i in range ( n ) : for j in range ( n+1 ) : a [ i ][ j ] = float ( input ( 'a[' +str ( i ) + '][' + str ( j ) + ']=' )) for i in range ( n ) : if a [ i ][ i ] == 0 .0: sys.exit ( 'Bagi dengan nol terdeteksi!' ) for j in range ( i+1, n ) : ratio = a [ j ][ i ] /a [ i ][ i ] for k in range ( n+1 ) : a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x [ n-1 ] = a [ n-1 ][ n ] /a [ n-1 ][ n-1 ] for i in range ( n-2,-1,-1 ) : x [ i ] = a [ i ][ n ] for j in range ( i+1,n ) : x [ i ] = x [ i ] - a [ i ][ j ] *x [ j ] x [ i ] = x [ i ] /a [ i ][ i ] print ( 'Solusi yang didapatkan adalah: ' ) for i in range ( n ) : print ( 'X%d = %0.2f' % ( i,x [ i ]) , end = '\\t' ) Hasil program : Masukkan jumlah yang tidak diketahui: 3 Masukkan Koefisien Matriks yang Diperbesar: a [ 0 ][ 0 ]= 2 a [ 0 ][ 1 ]= -7 a [ 0 ][ 2 ]= 4 a [ 0 ][ 3 ]= 9 a [ 1 ][ 0 ]= 1 a [ 1 ][ 1 ]= 9 a [ 1 ][ 2 ]= -6 a [ 1 ][ 3 ]= 1 a [ 2 ][ 0 ]= -3 a [ 2 ][ 1 ]= 8 a [ 2 ][ 2 ]= 5 a [ 2 ][ 3 ]= 6 Solusi yang didapatkan adalah: X0 = 4 .00 X1 = 1 .00 X2 = 2 .00 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 4, x 2 = 1, x 3 = 2.","title":"Sistem Persamaan Linear dengan Metode Eliminasi Gauss"},{"location":"sistem-persamaan-linear/#sistem_persamaan_linear_dengan_metode_jacobi","text":"Dalam metode ini kita akan membahas sistem persamaan dengan bentuk [B]{x} = {u} atau \\begin{gathered} b_{11} x_{11}+b_{12} x_{2}+\\cdots+b_{1 n} x_{n}=u_{1} \\\\ b_{21} x_{1}+b_{22} x_{2}+\\cdots+b_{2 n} x_{n}=u_{2} \\\\ \\vdots \\quad \\vdots \\\\ b_{n 1} x_{1}+b_{n 2} x_{2}+\\cdots+b_{n n} x_{n}=u_{n} \\end{gathered} Metode ini membuat sebuah sistem persamaan yang mendekati sistem persamaan di atas: \\begin{aligned} &x_{1}=\\frac{u_{1}-b_{12} x_{2}-b_{13} x_{3}-\\ldots-b_{1 n} x_{n}}{b_{11}} \\\\ &x_{2}=\\frac{u_{2}-b_{21} x_{1}-b_{23} x_{3}-\\ldots-b_{2 n} x_{n}}{b_{22}} \\\\ &x_{n}=\\frac{u_{n}-b_{n 1} x_{1}-b_{n 2} x_{2}-\\ldots-b_{n, n-1} x_{n-1}}{b_{n n}} \\end{aligned} bila b ii =0 atau memiliki nilai kecil, maka harus diatur agar b ii \u22600 Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan Metode Jacobi, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &\\left.\\begin{array}{l} 4 x_{1}+2 x_{2}+x_{3} & =11 \\\\ -x_{1}+2 x_{2} & =3 \\\\ 2 x_{1}+x_{2}+4 x_{3} & =16 \\end{array}\\right\\} \\Rightarrow\\{x\\}=\\left\\{\\begin{array}{l} 1 \\\\ 2 \\\\ 3 \\end{array}\\right\\} \\end{aligned} Jawab : Persamaan di atas ditulis lagi: \\begin{aligned} &x_{1}=\\frac{11}{4}-\\frac{1}{2} x_{2}-\\frac{1}{4} x_{3} \\\\ &x_{2}=\\frac{3}{2}+\\frac{1}{2} x_{1} \\\\ &x_{3}=4-\\frac{1}{2} x_{1}-\\frac{1}{4} x_{2} \\end{aligned} Pertama lakukan tebakan nilai awal {x 0 } lalu masukkan kedalam persamaan diatas untuk mendapatkan {x} baru. Misal disini tebakan nilai awal dalam vektor {x 0 } = [1, 1, 1] t \\begin{aligned} &x_{11}=\\frac{11}{4}-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=2 \\\\ &x_{21}=\\frac{3}{2}+\\frac{1}{2} \\times 1=2 \\\\ &x_{31}=4-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=\\frac{13}{4} \\end{aligned} Maka, \\begin{aligned} &\\left\\{x_{1}\\right\\}=\\left[2, \\quad 2, \\quad \\frac{13}{4}\\right]^{t}\\\\ &\\left\\{x_{2}\\right\\}=\\left[\\begin{array}{lll} 0.9375 & 2.5 & 2.5 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{3}\\right\\}=\\left[\\begin{array}{lll} 0.875 & 1.96875 & 2.90625 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{4}\\right\\}=\\left[\\begin{array}{lll} 1.03906 & 1.9375 & 3.0703 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{5}\\right\\}=\\left[\\begin{array}{lll} 1.01367 & 2.0195 & 2.9961 \\end{array}\\right]^{t}\\\\ &\\begin{aligned} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\vdots \\quad \\vdots \\\\ \\end{aligned}\\\\ &\\left\\{x_{14}\\right\\}=\\left[\\begin{array}{lll} 1.0000 & 2.0000 & 3.0000 \\end{array}\\right]^{t} \\end{aligned} Pada metode ini untuk medapatkan elemen vektor yang baru menggunakan elemen vaktor yang lama. Penjelasan di atas adalah algoritma perhitungan manual metode ini f1 = lambda x,y,z: ( 11 -2*y-1*z ) /4 f2 = lambda x,y,z: ( 3 +1*x+0*z ) /2 f3 = lambda x,y,z: ( 16 -2*x-1*y ) /4 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'Masukkan toleransi error: ' )) print ( '\\nHitung\\tx\\ty\\tz\\n' ) condition = True while condition: x1 = f1 ( x0,y0,z0 ) y1 = f2 ( x0,y0,z0 ) z1 = f3 ( x0,y0,z0 ) print ( '%d\\t%0.4f\\t%0.4f\\t%0.4f\\n' % ( count, x1,y1,z1 )) e1 = abs ( x0-x1 ) ; e2 = abs ( y0-y1 ) ; e3 = abs ( z0-z1 ) ; count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1>e and e2>e and e3>e print ( '\\nSolusi: x=%0.3f, y=%0.3f dan z = %0.3f\\n' % ( x1,y1,z1 )) Hasil program : Masukkan toleransi error: 0 .0001 Hitung x y z 1 2 .7500 1 .5000 4 .0000 2 1 .0000 2 .8750 2 .2500 3 0 .7500 2 .0000 2 .7812 4 1 .0547 1 .8750 3 .1250 5 1 .0312 2 .0273 3 .0039 6 0 .9854 2 .0156 2 .9775 7 0 .9978 1 .9927 3 .0034 8 1 .0028 1 .9989 3 .0029 9 0 .9998 2 .0014 2 .9989 10 0 .9996 1 .9999 2 .9997 11 1 .0001 1 .9998 3 .0002 12 1 .0000 2 .0001 3 .0000 Solusi: x = 1 .000, y = 2 .000 dan z = 3 .000 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 1, x 2 = 2, x 3 = 3.","title":"Sistem Persamaan Linear dengan Metode Jacobi"},{"location":"sistem-persamaan-linear/#sistem_persamaan_linear_dengan_metode_gauss-seidel","text":"Dalam metode ini kita akan membahas sistem persamaan dengan bentuk [B]{x} = {u} atau \\begin{gathered} b_{11} x_{11}+b_{12} x_{2}+\\cdots+b_{1 n} x_{n}=u_{1} \\\\ b_{21} x_{1}+b_{22} x_{2}+\\cdots+b_{2 n} x_{n}=u_{2} \\\\ \\vdots \\quad \\vdots \\\\ b_{n 1} x_{1}+b_{n 2} x_{2}+\\cdots+b_{n n} x_{n}=u_{n} \\end{gathered} Metode ini membuat sebuah sistem persamaan yang mendekati sistem persamaan di atas: \\begin{aligned} &x_{1}=\\frac{u_{1}-b_{12} x_{2}-b_{13} x_{3}-\\ldots-b_{1 n} x_{n}}{b_{11}} \\\\ &x_{2}=\\frac{u_{2}-b_{21} x_{1}-b_{23} x_{3}-\\ldots-b_{2 n} x_{n}}{b_{22}} \\\\ &x_{n}=\\frac{u_{n}-b_{n 1} x_{1}-b_{n 2} x_{2}-\\ldots-b_{n, n-1} x_{n-1}}{b_{n n}} \\end{aligned} bila b ii =0 atau memiliki nilai kecil, maka harus diatur agar b ii \u22600 Contoh : Dengan menggunakan Algoritma perhitungan manual, Python dan Metode Gauss-Seidel, tentukan nilai sistem persamaan dari soal dibawah berikut \\begin{aligned} &\\left.\\begin{array}{l} 4 x_{1}+2 x_{2}+x_{3} & =11 \\\\ -x_{1}+2 x_{2} & =3 \\\\ 2 x_{1}+x_{2}+4 x_{3} & =16 \\end{array}\\right\\} \\Rightarrow\\{x\\}=\\left\\{\\begin{array}{l} 1 \\\\ 2 \\\\ 3 \\end{array}\\right\\} \\end{aligned} Jawab : Persamaan di atas ditulis lagi: \\begin{aligned} &x_{1}=\\frac{11}{4}-\\frac{1}{2} x_{2}-\\frac{1}{4} x_{3} \\\\ &x_{2}=\\frac{3}{2}+\\frac{1}{2} x_{1} \\\\ &x_{3}=4-\\frac{1}{2} x_{1}-\\frac{1}{4} x_{2} \\end{aligned} Pertama lakukan tebakan nilai awal {x 0 } lalu masukkan kedalam persamaan diatas untuk mendapatkan {x} baru. Misal disini tebakan nilai awal dalam vektor {x 0 } = [1, 1, 1] t \\begin{aligned} &x_{11}=\\frac{11}{4}-\\frac{1}{2} \\times 1-\\frac{1}{4} \\times 1=2 \\\\ &x_{21}=\\frac{3}{2}+\\frac{1}{2} \\times 2=\\frac{5}{2} \\\\ &x_{31}=4-\\frac{1}{2} \\times 2-\\frac{1}{4} \\times \\frac{5}{2}=\\frac{19}{8} \\end{aligned} Maka, \\begin{aligned} &\\left\\{x_{1}\\right\\}=\\left[2, \\frac{5}{2}, \\frac{19}{8}\\right]^{t}\\\\ &\\left\\{x_{2}\\right\\}=\\left[\\begin{array}{lll} 0.9063 & 1.9531 & 3.0586 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{3}\\right\\}=\\left[\\begin{array}{lll} 1.0088 & 2.0044 & 2.9945 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{4}\\right\\}=\\left[\\begin{array}{lll} 0.9992 & 1.9996 & 3.0005 \\end{array}\\right]^{t}\\\\ &\\left\\{x_{5}\\right\\}=\\left[\\begin{array}{lll} 1.0000 & 2.0000 & 3.0000 \\end{array}\\right]^{t} \\end{aligned} Pada metode ini untuk medapatkan elemen vektor yang baru menggunakan elemen vaktor yang baru saja dihitung. Penjelasan di atas adalah algoritma perhitungan manual metode ini f1 = lambda x,y,z: ( 11 -2*y-1*z ) /4 f2 = lambda x,y,z: ( 3 +1*x+0*z ) /2 f3 = lambda x,y,z: ( 16 -2*x-1*y ) /4 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'Masukkan toleransi error: ' )) print ( '\\nHitung\\tx\\ty\\tz\\n' ) condition = True while condition: x1 = f1 ( x0,y0,z0 ) y1 = f2 ( x1,y0,z0 ) z1 = f3 ( x1,y1,z0 ) print ( '%d\\t%0.4f\\t%0.4f\\t%0.4f\\n' % ( count, x1,y1,z1 )) e1 = abs ( x0-x1 ) ; e2 = abs ( y0-y1 ) ; e3 = abs ( z0-z1 ) ; count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1>e and e2>e and e3>e print ( '\\nSolusi: x=%0.3f, y=%0.3f and z = %0.3f\\n' % ( x1,y1,z1 )) Hasil program : Masukkan toleransi error: 0 .0001 Hitung x y z 1 2 .7500 2 .8750 1 .9062 2 0 .8359 1 .9180 3 .1025 3 1 .0154 2 .0077 2 .9904 4 0 .9986 1 .9993 3 .0009 5 1 .0001 2 .0001 2 .9999 6 1 .0000 2 .0000 3 .0000 Solusi: x = 1 .000, y = 2 .000 and z = 3 .000 Hasil perhitungan sistem persamaan linear dari sistem persamaan diatas dengan menggunakan Python didapatkan hasil x 1 = 1, x 2 = 2, x 3 = 3.","title":"Sistem Persamaan Linear dengan Metode Gauss-Seidel"},{"location":"sistem-persamaan-linear/#rangkuman","text":"Sistem persamaan linear adalah himpunan persamaan linear yang mempunyai beberapa variabel. Persoalan sistem persamaan linear dapat diselesaikan dengan menggunakan Metode Eliminasi Gauss, Metode Jacobi, dan Metode Gauss-Seidel. Setiap metode memiliki tingkat akurasi yang berbeda-beda. Perbedaan tingkat akurasi tiap metode bergantung pada pendekatan yang digunakan.","title":"Rangkuman"},{"location":"sistem-persamaan-linear/#referensi","text":"Luknanto, Djoko. 2001. Metode Numerik. Yogyakarta: Universitas Gadjah Mada.","title":"Referensi"},{"location":"extensions/code-hilite/","text":"CodeHilite \u00b6 CodeHilite - Material for MkDocs Supported languages - Pygments Configure mkdocs.yml \u00b6 markdown_extensions: - codehilite","title":"CodeHilite"},{"location":"extensions/code-hilite/#codehilite","text":"CodeHilite - Material for MkDocs Supported languages - Pygments","title":"CodeHilite"},{"location":"extensions/code-hilite/#configure_mkdocsyml","text":"markdown_extensions: - codehilite","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/","text":"Footnote \u00b6 Footnotes - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - footnotes Example \u00b6 Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Footnote"},{"location":"extensions/footnote/#footnote","text":"Footnotes - Material for MkDocs","title":"Footnote"},{"location":"extensions/footnote/#configure_mkdocsyml","text":"markdown_extensions: - footnotes","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/#example","text":"Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Example"},{"location":"extensions/mathjax/","text":"MathJax \u00b6 PyMdown - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - mdx_math: enable_dollar_delimiter: True Example code \u00b6 $$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$ Example rendering \u00b6 \\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(x_{i}\\right) (1.1)","title":"MathJax"},{"location":"extensions/mathjax/#mathjax","text":"PyMdown - Material for MkDocs","title":"MathJax"},{"location":"extensions/mathjax/#configure_mkdocsyml","text":"markdown_extensions: - mdx_math: enable_dollar_delimiter: True","title":"Configure mkdocs.yml"},{"location":"extensions/mathjax/#example_code","text":"$$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$","title":"Example code"},{"location":"extensions/mathjax/#example_rendering","text":"\\int_{a}^{b} f(x) d x \\approx \\sum_{i=0}^{n-1} h f\\left(x_{i}\\right) (1.1)","title":"Example rendering"},{"location":"getting-started/docker/","text":"Start with Docker \u00b6 Public docker image \u00b6 Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub docker-compose \u00b6 Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"Start with Docker"},{"location":"getting-started/docker/#start_with_docker","text":"","title":"Start with Docker"},{"location":"getting-started/docker/#public_docker_image","text":"Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub","title":"Public docker image"},{"location":"getting-started/docker/#docker-compose","text":"Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"docker-compose"},{"location":"getting-started/download-boilerplate/","text":"Download boilerplate \u00b6 Git clone \u00b6 git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate Download zip \u00b6 wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#download_boilerplate","text":"","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#git_clone","text":"git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate","title":"Git clone"},{"location":"getting-started/download-boilerplate/#download_zip","text":"wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download zip"},{"location":"getting-started/invoke/","text":"Serve and open with invoke \u00b6 invoke \u00b6 Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution. Serve and open \u00b6 Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml Show all tasks \u00b6 $ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#serve_and_open_with_invoke","text":"","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#invoke","text":"Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution.","title":"invoke"},{"location":"getting-started/invoke/#serve_and_open","text":"Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml","title":"Serve and open"},{"location":"getting-started/invoke/#show_all_tasks","text":"$ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Show all tasks"},{"location":"getting-started/pip/","text":"Start with pip (Anaconda, Miniconda) \u00b6 pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pip/#start_with_pip_anaconda_miniconda","text":"pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pipenv/","text":"Start with pipenv \u00b6 pipenv \u00b6 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages \u00b6 pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs \u00b6 pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run \u00b6 pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"getting-started/pipenv/#start_with_pipenv","text":"","title":"Start with pipenv"},{"location":"getting-started/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"getting-started/pipenv/#install_all_packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"getting-started/pipenv/#run_mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"getting-started/pipenv/#pipenv_run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"hosting-and-deployment/aws-amplify-console/","text":"Host on AWS Amplify Console \u00b6 AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/aws-amplify-console/#host_on_aws_amplify_console","text":"AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/combinations/","text":"Hosting and Deployment \u00b6 GitHub Pages and GitHub \u00b6 Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab \u00b6 Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify \u00b6 Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console \u00b6 Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#hosting_and_deployment","text":"","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#github_pages_and_github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"hosting-and-deployment/combinations/#gitlab_pages_and_gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"hosting-and-deployment/combinations/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"hosting-and-deployment/combinations/#aws_amplify_console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"hosting-and-deployment/github-pages/","text":"Host on GitHub Pages \u00b6 Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions \u00b6 peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy \u00b6 pipenv \u00b6 pipenv run deploy # OR pipenv shell mkdocs gh - deploy # OR pipenv run mkdocs gh - deploy","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#host_on_github_pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_github_actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_mkdocs_gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/github-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh - deploy # OR pipenv run mkdocs gh - deploy","title":"pipenv"},{"location":"hosting-and-deployment/gitlab-pages/","text":"Host on GitLab Pages \u00b6 See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/gitlab-pages/#host_on_gitlab_pages","text":"See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/netlify/","text":"Host on Netlify \u00b6 Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"},{"location":"hosting-and-deployment/netlify/#host_on_netlify","text":"Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"}]}